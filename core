how java code executed:
-----------------------
JDK(Java development tool kit) -- it contains JRE(Java run time environment)[it contains JVM(java run time environment)]
javac fileName.java -- to compile java code
when we compile java code we get a byte code (fileName.class)

java code ---- javac fileName.java ---- gets the byte code(it is platform independent we can run it on any where, where we have JRE) --- .class

bytecode(*.class) --- JVM ----native code(mac, windows...)
we can run Java anywhere so Java is  platform-independent, JVM takes the byte code and converts it to native code to run in their OS(different os)
so this is the reason why Java is "platform independent", "portable"

Java was developed by James Gosling in 1995 and later acquired by Oracle in 2010.

Java features:
---------------
1. platform independent
2. portable
3. secure
4. Java is compiled and interpreted language
5. robust
6. oops

access modifiers:
----------------
1. private (only can access within the class, not outside the class, outside the package)
2. public (Access from anywhere)
3. protected (can access within a class, within the package, outside package by a subclass)
4. default (can access within in class, within package)

super keyword:
----------------
super keyword refers to the objects of the superclass. it is used when we want to call the superclass variable, methods, and constructor through a subclass object.
  -> Whenever the superclass and subclass variable and method name both are the same then only it can be used.
  -> To avoid confusion between superclass and subclass variables and methods that have the same name we should use the "super" keyword

                               ---------------------super----------------
                              |                      |                   |
                              variable            methods              constructor

syntax:
--------
class a{
  int a =10;
  a(int a){

   }
  void disp(){
    sysout("hello");
  }
}

class b extends a{
  int a = 30;
  void show(){
    super(100); //super class constructor
    sysout(super.a); //super class variable
    sysout(a);  
    sysout(super.disp()); //calling super class method
  }
}

static method:
--------------
if we declare methods as static we no need to initilize the objects, we can directly access it.
example:
--------
class a{
    public static void show(){
        System.out.println("hello");
    }

    public static void main(String[] arsg){ // since the main method have static we can execute directly
        a.show();
    } 
}

not static method(instance method):
------------------
class a{
    public void show(){
        System.out.println("hello");
    }

    public static void main(String[] arsg){ 
        a obj = new a();
        obj.show();
    } 
}

------------------------------------------------------------------
    access modifier  
---> public static void main(String[] args)
                   return type
this can be in any format not like the way above is, we can use it like as static public void main(String[] args).
------------------------------------------------------------------

Packages in Java:
-------------------
A Java package is a group of similar types of classes, interfaces, and sub-packages.
example:
--------
the package is nothing but a folder in Windows.

types of packages:
------------------
1. user-defined  (package add, package mypack etcc...)
2. pre-defined -- (java.lang, java.util, java.sql etc..)

advantages of packaging:
------------------------
1. re-usability
2. security
3. hiding (if we make a package1 of code and use that package1 in another code here we are hiding code which is in packag1)

disadvantages:
--------------
we cannot pass parameters to the package.

pre-defined
-------------
1. java.util -- this package is used to implement data structures in Java. it contains a utility class also called "collection framework".
example:
--------
LinkedList, stack, vector, HashSet, tree etc.

2. java.io-- io stands for input and output this package is used to perform input and output operations on file.

user-defined:
-------------
we make a package
to compile the user-defined package class we use ---  "javac -d . className.java"

multithreading:
----------------
multithreading is the process to execute multiple threads at the same time without depending on other threads.
-> multithreading saves time 
suppose we have a program it is taking 20 mins to execute the code.
-> If we use the concept of the thread 
-> t1 thread will be executing half of the code
-> t2 thread will be executing another half 
threads execute simultaneously so both threads complete execution in 10 mins

multitasking:
--------------
Take the example of a laptop in a laptop we are running many applications at a time like opening Chrome, playing songs in Spotify and coding in vs code and etcc...
here we are making use of CPU better and also reducing the time

this keyword:
-------------
