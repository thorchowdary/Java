how java code executed:
-----------------------
JDK(Java development tool kit) -- it contains JRE(Java run time environment)[it contains JVM(java run time environment)]
javac fileName.java -- to compile java code
when we compile java code we get a byte code (fileName.class)

java code ---- javac fileName.java ---- gets the byte code(it is platform independent we can run it on any where, where we have JRE) --- .class

bytecode(*.class) --- JVM ----native code(mac, windows...)
we can run Java anywhere so Java is  platform-independent, JVM takes the byte code and converts it to native code to run in their OS(different os)
so this is the reason why Java is "platform independent", "portable"

Java was developed by James Gosling in 1995 and later acquired by Oracle in 2010.

Java features:
---------------
1. platform independent
2. portable
3. secure
4. Java is compiled and interpreted language
5. robust
6. oops

access modifiers:
----------------
1. private (only can access within the class, not outside the class, outside the package)
2. public (Access from anywhere)
3. protected (can access within a class, within the package, outside package by a subclass)
4. default (can access within in class, within package)

super keyword:
----------------
super keyword refers to the objects of the superclass. it is used when we want to call the superclass variable, methods, and constructor through a subclass object.
  -> Whenever the superclass and subclass variable and method name both are the same then only it can be used.
  -> To avoid confusion between superclass and subclass variables and methods that have the same name we should use the "super" keyword

                               ---------------------super----------------
                              |                      |                   |
                              variable            methods              constructor

syntax:
--------
class a{
  int a =10;
  a(int a){

   }
  void disp(){
    sysout("hello");
  }
}

class b extends a{
  int a = 30;
  void show(){
    super(100); //super class constructor
    sysout(super.a); //super class variable
    sysout(a);  
    sysout(super.disp()); //calling super class method
  }
}

static method:
--------------
if we declare methods as static we no need to initilize the objects, we can directly access it.
example:
--------
class a{
    public static void show(){
        System.out.println("hello");
    }

    public static void main(String[] arsg){ // since the main method have static we can execute directly
        a.show();
    } 
}

not static method(instance method):
------------------
class a{
    public void show(){
        System.out.println("hello");
    }

    public static void main(String[] arsg){ 
        a obj = new a();
        obj.show();
    } 
}

------------------------------------------------------------------
    access modifier  
---> public static void main(String[] args)
                   return type
this can be in any format not like the way above is, we can use it like as static public void main(String[] args).
------------------------------------------------------------------

Packages in Java:
-------------------
A Java package is a group of similar types of classes, interfaces, and sub-packages.
example:
--------
the package is nothing but a folder in Windows.

types of packages:
------------------
1. user-defined  (package add, package mypack etcc...)
2. pre-defined -- (java.lang, java.util, java.sql etc..)

advantages of packaging:
------------------------
1. re-usability
2. security
3. hiding (if we make a package1 of code and use that package1 in another code here we are hiding code which is in packag1)

disadvantages:
--------------
we cannot pass parameters to the package.

pre-defined
-------------
1. java.util -- this package is used to implement data structures in Java. it contains a utility class also called "collection framework".
example:
--------
LinkedList, stack, vector, HashSet, tree etc.

2. java.io-- io stands for input and output this package is used to perform input and output operations on file.

user-defined:
-------------
we make a package
to compile the user-defined package class we use ---  "javac -d . className.java"

multithreading:
----------------
multithreading is the process to execute multiple threads at the same time without depending on other threads.
-> Multithreading saves time 
suppose we have a program it is taking 20 mins to execute the code.
-> If we use the concept of the thread 
-> t1 thread will be executing half of the code
-> t2 thread will be executing another half 
threads execute simultaneously so both threads complete execution in 10 mins

thread:
-------
-> thread is a pre-defined class that is available in "java.lang" package.
-> thread is a basic unit of cpu and it is well known as independent execution.

example:
---------
main(){
withdraw();      -- t1
deposit();        --t2
checkBalance();  -- t3
}

-> We have three threads one thread is being assigned to one service, and whenever users come to access them
   suppose a user1 came to access withdraw(), another user2 deposit(), and another user3 checkBalance(), here all users are able to access them without being blocked and reduce time.
-> Without threads, it will be like when one user is accessing one service the others should wait because every service is being blocked.


multitasking:
--------------
Take the example of a laptop in a laptop we are running many applications at a time like opening Chrome, playing songs in Spotify, and coding in vs code and etc...
here we are making use of the CPU better and also reducing the time

creating a thread in Java:
------------------------
1. By extending the thread class.
2. By implementing a runnable interface.

1. By extending the thread class.
----------------------------------
import java.io.*;
import java.util.*;
public class GFG extends Thread {
	public void run()
	{
	    try{
	        System.out.println("Thread Started Running...");
	        Thread.sleep(1000); // it will wait for 1 sec
		    System.out.println("Thread Started Running...");
	    }
	    catch(Exception e){
	    }
	}
	public static void main(String[] args)
	{
		GFG g1 = new GFG();
		// Invoking Thread using start() method
		g1.start();
	}
}

2. By implementing a runnable interface.
-----------------------------------------
import java.io.*;
import java.util.*;

public class GFG implements Runnable {
	// method to start Thread
	public void run()
	{
		System.out.println(
			"Thread is Running Successfully");
	}

	public static void main(String[] args)
	{
		GFG g1 = new GFG();
		//g1.start() // thread wont start this way like how we did in "extends way", this runnable class deos not have power to start that thread
		// initializing Thread Object
		Thread t1 = new Thread(g1);
		t1.start();
	}
}

Thread Scheduler:
-----------------
-> A component of Java that decides which thread to run or execute and which thread to wait is called a thread scheduler in Java. 

thread is only chosen by a thread scheduler if it is in the runnable state. However, if there is more than one thread in the runnable state, 
it is up to the thread scheduler to pick one of the threads and ignore the other ones. There are some criteria that decide which thread will execute first. 
There are two factors for scheduling a thread i.e. Priority and Time of arrival.

Priority: 
------------
The priority of each thread lies between 1 to 10. If a thread has a higher priority, it means that the thread has got a better chance of getting picked up by the thread scheduler.

Time of Arrival:
------------------
Suppose two threads of the same priority enter the runnable state, then priority cannot be the factor to pick a thread from these two threads. In such a case,
the arrival time of the thread is considered by the thread scheduler. A thread that arrived first gets the preference over the other threads.

thread lifecycle:
------------------
we know that thread is well-known for independent execution. During the life cycle a thread can move from different states.

1. new state       (born state)
2. runnable state  (ready state)
3. running state   (execution state)
4. waiting state   (blocked state)
5. dead state      (exit state)

sleep() method:
--------------
sleep is a static method of thread class which shoes checked exception i.e IntruptedException.
the main purpose of the sleep method is to put a thread into a temporary waiting state.

syntax:         ____(milli seconds)
-------        |
Thread.sleep(1000);
or
Thread t = new Thread();
t.sleep(1000);

join() method
---------------
-> The main purpose of join is to put a thread into a temporary waiting state.
-> join method is used suppose we want to execute complete any particular thread among all the threads available in the thread pool.
-> The join method also throws a checked exception i.e. interrupted exception.

Example:
--------
class join extends Thread{
    public void run(){
    String name = Thread.currentThread().getName();
    for(int i=0;i<3;i++){
        System.out.println(name);
    }
    }
}
class b{
    public static void main(String[] args){
        join t1 =new join();
        join t2 =new join();
        join t3 =new join();

        t1.setName("thread 1");
        t2.setName("thread 2");
        t3.setName("thread 3");

        t2.start();
        try {
            t2.join(); // it will finishing executing thread 2 by putting t1 and t3 in temporary waiting state
        } catch (Exception e) {
            // TODO: handle the exception
        }
        t1.start();
        t3.start();
    }
}

suspend() method and resume method(); these are depricted after java 1.1 onwards
------------------------------------
-> The main purpose of suspend method it put the thread from a running state to a waiting state.
-> Resume method is used to resume a suspended thread from the waiting state to the running state.
example:
--------
public class suspend extends Thread {
    public void run(){
        String name = Thread.currentThread().getName();
        for(int i=0;i<3;i++){
            System.out.println(name);
        }
    }
    
}
public class a{
    public static void main(String[] args){
        suspend t1 = new suspend();
        suspend t2 = new suspend();
        suspend t3 = new suspend();
        t1.setName("thread 1");
        t2.setName("thread 2");
        t3.setName("thread 3");

        t1.start();
        t2.suspend();
        t3.start();
        t2.resume();
    }
}


stop() method:
--------------
stop is a method of thread class that is used to terminate a thread permanently.

example:
---------
public class stop extends Thread{
    public void run(){
        String name = Thread.currentThread().getName();
        for(int i=0;i<3;i++){
            System.out.println(name);
        }
    }
    
}
public class tharunk{
    public static void main(String[] args){
    stop t1 = new stop();
    stop t2 = new stop();
    stop t3 = new stop();
    t1.setName("thread 1");
    t2.setName("thread 2");
    t3.setName("thread 3");

    t1.start();
    t2.start();;
    t3.start();
    t2.stop();
    }
}
yeild() method:
---------------
A yield() method is a static method of the Thread class and it can stop the currently executing thread and will give a chance to other waiting threads of the same priority.

isAlive() method:
------------------
isAlive() method is a pre-defined method of thread class through which we can verify whether a thread is alive or not.
-> If a thread is alive it will return true else false.
-> If we run the alive() method before starting the thread it will return false.

thread priority:
-----------------
In Java, it is possible to set the priority of threads.
-> To set these priorities java thread class provided two pre-defined methods.
	->setpriority()
	->getpriority()

the thread class also provided three pre-defined final state variables and their value lie between 1 to 10.
Thread.MIN_PRIORITY = 1
Thread.NORM_PRIORITY = 5
Thread.MAX_PRIORITY = 10

-> If we won't set any priority to the threads JVM by default is set to NORMAL priority which is 5.

example:
----------
public class priority extends Thread{
    public void run(){
        int priority =  Thread.currentThread().getPriority();
        String name = Thread.currentThread().getName();
        System.out.println(name+" "+ priority);
    }
    
}
class ketineni {
    public static void main(String[] args){
        priority t1 = new priority();
        priority t2 = new priority();
        priority t3 = new priority();
        t1.setName("thread 1");
        t2.setName("thread 2");
        t3.setName("thread 3");

        t1.setPriority(5);
        t2.setPriority(10);
        t3.setPriority(8);
        t1.start();
        t2.start();
        t3.start();
    }
}

Problems with multithreading:
---------------------------------
Multithreading is very good whenever we want to complete our task as soon as possible, but in some situations, it may provide some wrong results or corrupted data
this situation occurs whenever the same resource is accessible by multiple threads at the same time.
-> The synchronization allows to access one thread at a time the rest will be in a waiting state.

example:
---------
public class problem implements Runnable {
     int avaiable =1, passenger;
    problem(int passenger){ 
            this.passenger = passenger;
        }
    public void run(){
       
       if(avaiable>=passenger){ 
            String name = Thread.currentThread().getName();
            System.out.println(name + " seat is reserved ");
            avaiable = avaiable - passenger;
       }
       else{
        System.out.println("Seats are reserved");
       }
    }
}

class ket{
    public static void main(String[] args){
        problem t = new problem(1);
        Thread t1 = new Thread(t);
        Thread t2 = new Thread(t);
        Thread t3 = new Thread(t);

        t1.setName("tharun");
        t2.setName("kumar");
        t3.setName("Naidu");

        t1.start();t2.start();t3.start(); 
    }
}

output:
-------
tharun seat is reserved 
Naidu seat is reserved     ---the available seat is only one but threads it allowed all 3 to book it
kumar seat is reserved 

with synchronized method:
-------------------------
public class problem implements Runnable {
     int avaiable =1, passenger;
    problem(int passenger){ 
            this.passenger = passenger;
        }
    public synchronized void run(){
       
       if(avaiable>=passenger){ 
            String name = Thread.currentThread().getName();
            System.out.println(name + " seat is reserved ");
            avaiable = avaiable - passenger;
       }
       else{
        System.out.println("Seats are reserved");
       }
    }
}

class ket{
    public static void main(String[] args){
        problem t = new problem(1);
        Thread t1 = new Thread(t);
        Thread t2 = new Thread(t);
        Thread t3 = new Thread(t);

        t1.setName("tharun");
        t2.setName("kumar");
        t3.setName("Naidu");

        t1.start();t2.start();t3.start();      
    }
}

output:
-------
tharun seat is reserved 
Seats are reserved
Seats are reserved

synchronization:
-----------------
synchronization is a technique through which we can control multiple threads or among the number of threads only one thread will enter inside the synchronized area.
-> The main purpose of synchronization is to overcome the problem of multithreading when multiple threads are trying to access the same resource at the same time on that situation it 
may provide some wrong information.

synchronization is classified into two categories
1. method level synchronization
2. block level synchronization

1. method level synchronization:
---------------------------------
-> The synchronization allows to access one thread at a time the rest will be in a waiting state.

example:
---------
public class problem implements Runnable {
     int avaiable =1, passenger;
    problem(int passenger){ 
            this.passenger = passenger;
        }
    public void run(){
       
       if(avaiable>=passenger){ 
            String name = Thread.currentThread().getName();
            System.out.println(name + " seat is reserved ");
            avaiable = avaiable - passenger;
       }
       else{
        System.out.println("Seats are reserved");
       }
    }
}

class ket{
    public static void main(String[] args){
        problem t = new problem(1);
        Thread t1 = new Thread(t);
        Thread t2 = new Thread(t);
        Thread t3 = new Thread(t);

        t1.setName("tharun");
        t2.setName("kumar");
        t3.setName("Naidu");

        t1.start();t2.start();t3.start(); 
    }
}

output:
-------
tharun seat is reserved 
Naidu seat is reserved     ---the available seat is only one but threads it allowed all 3 to book it
kumar seat is reserved 

with synchronized method:
-------------------------
public class problem implements Runnable {
     int avaiable =1, passenger;
    problem(int passenger){ 
            this.passenger = passenger;
        }
    public synchronized void run(){
       
       if(avaiable>=passenger){ 
            String name = Thread.currentThread().getName();
            System.out.println(name + " seat is reserved ");
            avaiable = avaiable - passenger;
       }
       else{
        System.out.println("Seats are reserved");
       }
    }
}

class ket{
    public static void main(String[] args){
        problem t = new problem(1);
        Thread t1 = new Thread(t);
        Thread t2 = new Thread(t);
        Thread t3 = new Thread(t);

        t1.setName("tharun");
        t2.setName("kumar");
        t3.setName("Naidu");

        t1.start();t2.start();t3.start();      
    }
}

output:
-------
tharun seat is reserved 
Seats are reserved
Seats are reserved


2. block level synchronization:
----------------------------------
in block-level synchronization 

this keyword:
-------------

collection framework:
-----------------------
Java collection is a set of predefined classes and interfaces that helps programmers to perform different kinds of data structure operations like sorting, searching, traversing, 
storing and processing data efficiently.

			Iterator
  			   |
  		           |
			collection
		-----------|------------
		|          |		|
	     list	queue 		set

--> list (ArrayList, LinkedList, vector, stack)
--> queue (priorityQueue, dequeue, arraydequeue)
--> set (HashSet, linked HashSet, sorted set, treeset)


interview questions:
---------------------

diff between hashtables. hashmap, concurrent hashmap
-----------------------------------------------------
Hashtable:
    It is one of the oldest implementations of the Map interface and was part of the initial Java release.
    It is thread-safe, meaning multiple threads can safely access and modify it concurrently without external synchronization.
    It does not allow null keys or values. Any attempt to store null will result in a NullPointerException.
    It is synchronized, which means its methods are implicitly thread-safe. However, this synchronization comes with a performance cost.
HashMap:
    It is a non-synchronized implementation of the Map interface introduced in Java 1.2.
    It allows null keys and null values, making it more flexible in certain scenarios.
    It is not thread-safe, meaning concurrent access without proper synchronization can lead to data corruption or unexpected behavior.
    Due to its lack of synchronization, it generally provides better performance compared to Hashtable in single-threaded environments.

ConcurrentHashMap:
    It was introduced in Java 1.5 to provide a thread-safe alternative to HashMap, suitable for high-concurrency scenarios.
    It allows multiple threads to read and write concurrently without external synchronization, but with some restrictions.
    Unlike Hashtable, it does not use a single lock for the entire data structure. Instead, it divides the data into segments, each having its own lock, enabling more fine-grained concurrency.
    It allows null values but does not allow null keys, similar to HashMap.
    It achieves better performance in highly concurrent scenarios compared to Hashtable since multiple threads can operate on different segments concurrently.


Singelton class in java:
-------------------------
A Singleton class is a design pattern used in object-oriented programming to ensure that a class has only one instance and provides a global point of access to that instance. 
The primary purpose of using the Singleton pattern is to control object creation and ensure that multiple instances of the class are not created inadvertently, 
which is useful in scenarios where a single instance of a class is sufficient for the entire application.

To implement a Singleton pattern, you typically follow these steps:

    Private Constructor: Ensure that the class has a private constructor so that it cannot be instantiated from outside the class.

    Static Instance: Create a static private instance variable of the class type within the class itself. This is where the single instance of the class will be stored.

    Static Access Method: Provide a public static method that allows external code to access the single instance of the class. If the instance doesn't exist yet, the method will create it; otherwise, it will return the existing instance.

Here's a simple example of a Singleton class in Java:

public class Singleton {
    private static Singleton instance;

    // Private constructor prevents instantiation from outside the class.
    private Singleton() {}

    // Static method to provide access to the single instance of the class.
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

diff between array and arraylist:
---------------------------------
Type:
    Array: Arrays are a fundamental data structure in Java and are part of the core language. They can hold elements of primitive data types (e.g., int, double, char) or reference data types (e.g., objects).
    ArrayList: ArrayList is a class in the java.util package and is part of the Java Collections Framework. It can only hold objects (reference data types) and not primitive data types. However, you can use the wrapper classes (e.g., Integer, Double, Character) to store primitive data types in ArrayLists.
Size:
    Array: Arrays have a fixed size, which is determined when the array is created. Once the array is initialized, its size cannot be changed.
    ArrayList: ArrayLists have a dynamic size and can grow or shrink as needed. They automatically resize themselves when elements are added or removed, allowing for more flexibility in handling collections.
Methods:
    Array: Arrays provide basic functionality like element access by index, length, and array copying. They do not have built-in methods for adding or removing elements, as the size is fixed.
    ArrayList: ArrayLists provide a wide range of methods to manipulate the collection, such as add(), remove(), get(), size(), clear(), and more. These methods make it easier to work with collections compared to arrays.
