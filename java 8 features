Java 8 features:
----------------------------
1. lambda expressions
2. functional interface
3. default methods
4. predefined functional interface
  a. predicate
  b. function
  C. supplier
  d. consumer
5. constructor and method reference
6. stream API
7. Date & Time API

stream Api:
------------
It is a default method in the collection interface
If we want to process objects from the collection we use stream
java.util.stream package
the purpose of a stream is to reduce the length of the code
stream is not only for particular collections it can apply to a group of values for example we can use stream.of(arrays)

we have 
stream()
filter()
collect()
count()
map()
collect()
sorterd()
sorted(comparator)
min(comparator)
maax(Comparator)
forEach()
toArray()

without using stream:
--------------------------------
code: double the ele in the list
 List<integer> new_list = ArrayList<>;
  for(Integer I : list){
    new_list.add(I**2);
}
sysout(new_list)

using stream:
-----------------
list<integer> new_list = list.strea().map(x->x**2).collect(collectors.tolist());
sysout(new_list)

1. If we want to filter the data we use "filter(predicate)"  method predicta always return boolean
2. To create an equivalent object whatever data is present in the stream we go with "map(function<T,l> f) function return int, char, floar, etc..
3. to collect value in the stream we use "collect"
4. to get length/count we use "count"
5. to sort we use "sorted()" default sorting order is ASC order, for custom sort we pass comparator "sorted(comparator())" 
6. to get min ele we use "min(comparator c)"
7. to get max ele we use max(Comparator c)"

example:
filter, count:
----------------
count value less then 5
ArrayList<integer> list = new ArrayList<Integer>()
list.add(1);
list.add(2);
list.add(3);
list.add(4);
list.add(6);
List<Integer> outcome = list.stream().filter(x->x>5).count();
sysout(outcome)

sorted(): default is ASC order
---------
List<Interger> outcome  =list.stream().sorted().collect(colectors.tolist());
default sorting use comparable Interface it has compareTo() method
a,b->a.compareTO(b)
In order to go with desc either we can folllow below approach 
  or 
we can pass - 
a,b-> - a.compareTo(b)
  or
(a,b)->b.compareTo(a)

sorted(comparator) - customized sorting:
-------------------------------------------
for DESC order we need pass the comparator comparater interface has compare mehtod which take two arguments obj1, obj2 
compare(obj1, obj2)
returns -ve if obj1 has came before obj2
returns +ve if obj1 has came after obj2
returns 0 if obj1 == obj2
we can pass the argument like this (a,b)->(a<b)?1:(a>b)?-1:0
sorted((a,b)->(a<b)?1:(a>b)?-1:0)
  
min() & max():
-----------------
Inorder to get min and max ele in the list we go with 
we pass argument as comparator()
min(comparator())
min((a,b)->a.compareTo(b));
max((a,b)->a.compareTo(b));

Integer min = list.stream().min((a,b)->a.compareTo(b)).get());
Integer max = list.stream().min((a,b)->a.compareTo(b)).get());

to get reverse of max and min we just pass "-" like we did in  sorting
Integer min = list.stream().min((a,b)-> -a.compareTo(b)).get());
Integer max = list.stream().min((a,b)-> -a.compareTo(b)).get());

forEach method():
-----------------
With the help of for each method we can perform any operation on each ele in the list
forEach method function as an argument

without forEach():
------------------------
to print ele in array:

for(Integer I: array){
  sysout(i)
}

using forEach()
---------------------
array.stream().forEach(system.out::println)

to get double if each ele in the array
----------------------------------
array.stream().forEach(i->{system.out.println("Double of +i+"is:"+(i*i);}

toArray():
----------
to convert the stream of ele into an array

Integer[] i = l.stream().toArray(Integer[]::new);

------------------------------------------------------------------------------------------------------------------------------------------------------------
lambda expression:
------------------
the purpose of a lambda expression is to enable functional programming in the Java language
functional programming means passing a function as an argument, assigning a function to a variable
a = f()

lambda expression is just an "anonymous function/name less function" The function that does not have the name, return type, or modifiers is called a lambda expression
another name for lambda expression is "closures"

normal function:
----------------

public void m1(){
  sysout("hello")
}

converting function to lambda function:
---------------------------------------
()->{ 
  system.out.println("hello") 
}

with the help of lambda expression, we write fewer lines of code

public void add(int a, int b){
 system.out.println(a+b);
}

lambda expression:
------------------
(a, b) -> {
 system.out.print(a+b);
}

here if we observe we are not passing datatypes, sometimes the compiler even detects the datatype so we can remove it will see further how compiler detects in functional interface

to get a square of ele:
(n)->(n*n)

how to call/invoke lambda expression:
------------------------------------------
Wherever "functional interfaces" are there we can use a lambda expression, but we cannot use it in another area

the interface does not have any methods is called a "marker interface"
examples:
--------
serilizables, randomAcess, singlethread model

functional interface:(SAM -> Single Abstract Method)
---------------------
interface that has only one abstract method is called a functional interface
examples:
---------
runnable()->has only one run() method
callable() -> has onyl one call() method

from java 1.8 onwards we can have default and static methods in the interface, for functional interface the only restrictions are for abstract methods not for default and static methods

we can use @functional interface er are telling explicitly the interface is a functional interface 

@functional interface
interface a {
 public void m1(){}
 public void m2(){}
}
if we compile this code will get an error saying that only one abstract class is allowed since we passed 2 methods too if we don't annotate we will not get any error, since 
we gave annotation it will get an error.

by default, the interface having one abstract method is a functional interface
interface a {
 public void m1(){}
}

the link between functional interface and lambda expression
-----------------------------------------------------------
without lambda expression:
--------------------------
Interface interf{
 public void m1()
}

class demo implements interf{
 public void m1(){
  sysout("hello")
 }
}

class test{
public static void main(String[] args){
  interf a = new demo();
  a.m1();
}

implementing a functional interface with lambda expression

Interface interf{
 public void m1()
}

class test{
public static void main(string[] args){
 Interf a = ()->system.out.println("hello");
 a.m1();
}

example 2:
----------
Interface interf{
 public void add(int a, int b); <--------|
}                                        |
                                         |
class test{                              |
public static void main(string[] args){  |    //here the discussion that the compiler will detect the data types of parameter 
 interf a = (a,b)->(a+b);  -------------->    //Since the function interface has only 1 method it has arguments that we are referring to in the lambda expression
 a.add(1,2);                                 // so compiler will detect the data type
}









