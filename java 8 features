stream Api:
------------
It is a default method in collection interface
If we want to process objects from the collection we use stream
java.util.stream package
the purpose of a stream is to reduce the length of code
stream is not only for particular collections it can be applicable for group of values for example we can use stream.of(arrays)

we have 
stream()
filter()
collect()
count()
map()
collect()
sorterd()
sorted(comparator)
min(comparator)
maax(Comparator)
forEach()
toArray()

without using stream:
--------------------------------
code: double the ele in the list
 List<integer> new_list = ArrayList<>;
  for(Integer I : list){
    new_list.add(I**2);
}
sysout(new_list)

using stream:
-----------------
list<integer> new_list = list.strea().map(x->x**2).collect(collectors.tolist());
sysout(new_list)

1. If we want to filter the data we use "filter(predicate)"  method predicta always return boolean
2. To create an equivalent object whatever data is present in the stream we go with "map(function<T,l> f) function return int, char, floar, etc..
3. to collect value in the stream we use "collect"
4. to get length/count we use "count"
5. to sort we use "sorted()" default sorting order is ASC order, for custom sort we pass comparator "sorted(comparator())" 
6. to get min ele we use "min(comparator c)"
7. to get max ele we use max(Comparator c)"

example:
filter, count:
----------------
count value less then 5
ArrayList<integer> list = new ArrayList<Integer>()
list.add(1);
list.add(2);
list.add(3);
list.add(4);
list.add(6);
List<Integer> outcome = list.stream().filter(x->x>5).count();
sysout(outcome)

sorted(): default is ASC order
---------
List<Interger> outcome  =list.stream().sorted().collect(colectors.tolist());
default sorting use comparable Interface it has compareTo() method
a,b->a.compareTO(b)
In order to go with desc either we can folllow below approach 
  or 
we can pass - 
a,b-> - a.compareTo(b)
  or
(a,b)->b.compareTo(a)

sorted(comparator) - customized sorting:
-------------------------------------------
for DESC order we need pass the comparator comparater interface has compare mehtod which take two arguments obj1, obj2 
compare(obj1, obj2)
returns -ve if obj1 has came before obj2
returns +ve if obj1 has came after obj2
returns 0 if obj1 == obj2
we can pass the argument like this (a,b)->(a<b)?1:(a>b)?-1:0
sorted((a,b)->(a<b)?1:(a>b)?-1:0)
  
min() & max():
-----------------
Inorder to get min and max ele in the list we go with 
we pass argument as comparator()
min(comparator())
min((a,b)->a.compareTo(b));
max((a,b)->a.compareTo(b));

Integer min = list.stream().min((a,b)->a.compareTo(b)).get());
Integer max = list.stream().min((a,b)->a.compareTo(b)).get());

to get reverse of max and min we just pass "-" like we did in  sorting
Integer min = list.stream().min((a,b)-> -a.compareTo(b)).get());
Integer max = list.stream().min((a,b)-> -a.compareTo(b)).get());

forEach method():
-----------------
With the help of for each method we can perform any operation on each ele in the list
forEach method function as an argument

without forEach():
------------------------
to print ele in array:

for(Integer I: array){
  sysout(i)
}

using forEach()
---------------------
array.stream().forEach(system.out::println)

to get double if each ele in array
----------------------------------
array.stream().forEach(i->{system.out.println("Double of +i+"is:"+(i*i);}

toArray():
----------
to convert stream of ele into array

Integer[] i = l.stream().toArray(Integer[]::new);
