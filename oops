Oops, concepts:
--------------
1. polymorphism
2. encapsulation
3. inheritance
4. abstraction

1. polymorphism:
----------------
poly --many
morphism -- forms

polymorphism is a Greek word whose meaning is "same object having different forms"

example:
--------
    one person can be a student, teacher, friend, or customer.

polymorphism can be achieved in two ways
1. runtime polymorphism (method overriding)
2. compile time polymorphism (method overloading)

1. runtime:
------------
class a{
  void show(){  -->show() method exists here, we can override in the child class
  system.out.println("hello);  
  }
}

class b extends a{

we are overriding the method in the superclass.
to override the method there should be a method in the superclass without having a method in the superclass if we try to override it will give an error
to call the superclass method output we use the super keyword

super.show();
@override
void show(){
sysout("hi")
}
}

2.compiletime(method overloading)
----------------------------------
the same method in different forms, they get differentiated with the parameters passed to that method

void show(int a){
sysout("a");
}
void show(int a,int b){
sysout("ab");
}
void show(int a,int b, int c){
sysout("abc");
}

when we call
show(1);
show(1,2);
show(1,2,3);

this is called method overloading



2. encapsulation:
--------------------
wrapping out data members and member methods in a single class is called encapsulation.

note:
----
1. declare class members as private
2. methods as public

* encapsulation also does data hiding(by making class members private) and abstraction.


class a {
private int a; --- data hiding // we cannot access the private variables outside only class methods can access them, if we try to assign a value to it from outside it will 
                                  throw an error, that is the reason we are setting the a value with the x argument.
void setValue(int x){ ---->absraction is happing by hiding the unwanted information from the user, also we are setting value a by passing an argument x.
 a =  x ;
}
void getValue(){
sysout(value);
}
public static void main(String args[]){
bag a = new a();
a.setvalue(10);
sysout(a.getvalue);

}
}

3. inheritance:
------------------
when we construct a new class from an existing class in such a way that the new class access all the features and properties of an existing class.
    -> in java we use extends keyword to perform inheritance
    -> It provides code re-usability
    -> We can't access private members of the class through inheritance.
    -> Method overriding is only possible through inheritance.

syntax:
-------

class a{ //super class
------
}
class b extends a{ //sub class

}

types of inheritance:
-----------------------
1. single/simple inheritance:
 ------------------------------
simple inheritance is that contains only one superclass and one subclass.
superclass
 |
 |
subclass

2. multi-level inheritance:
--------------------------
in multi-level inheritance, we have only one superclass and multiple subclasses.
superclass
    |
subclass 1
    |
subclass 2
    |
subclass 3 and so on.......

syntax:
------
class a { //superclass

}
class b extends a{ //subclass1

}
class c extends b{ //subclass2

}

3. multiple inheritance
------------------------
java does not support multiple inheritances
whenever a subclass wants to inherit the property of two or more superclasses that have the same method the Java compiler can't decide which class methods should inherit.
then there will be a chance of memory duplication i.e. reason java does not support multiple inheritance.

super class1            super class2
      |                      |
      ------>subclass<-------

syntax:
--------
class a { //superclass
    void m1(){
    }
}

class b { //superclass
    void m1{
    }
}

class c extends a,b{ //subclass
  c in confusion
}

suppose superclass1 and superclass2 have the same service when the subclass extends with both the classes will get an ambiguity as to which service to use, so java
does not support multiple inheritance.

with the help of interfaces, we can achieve multiple inheritance.

4. hierarchical inheritance:
-----------------------------
an inheritance that contains only one superclass and multiple subclasses, and all subclassed are directly extended from the superclass.


    ----- superclass -------
    |        |             |
subclass1   subclass2    subclass3

syntax:
--------
class a{ //superclass

}

class b extends a{ //subclass1

}

class c extends a{ //subclass2

}
